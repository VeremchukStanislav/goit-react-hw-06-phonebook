{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortId","generate","deleteContact","changeFilter","ContactForm","state","handeChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","type","onChange","pattern","title","required","Component","connect","dispatch","contactActions","ContactItem","onDelete","onClick","getVisibleContacts","allItems","filter","normalizedFilter","toLowerCase","contact","includes","contacts","items","contactId","map","target","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","contactsReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.76caaa5e.chunk.js","sourcesContent":["import shortId from 'shortid';\n// import types from './contacts-types';\nimport { createAction } from '@reduxjs/toolkit';\n\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: shortId.generate(),\n//     name,\n//     number,\n//   },\n// });\n\n//Without @reduxjs/toolkit\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\nconst addContact = createAction('contacts/add', ({ name, number }) => {\n  return {\n    payload: {\n      id: shortId.generate(),\n      name,\n      number,\n    },\n  };\n});\n\nconst deleteContact = createAction('contacts/delete');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, deleteContact, changeFilter };\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactActions from '../../redux/contacts/contacts-actions';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handeChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state); // App formSubmitHandler\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handeChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Phone\n          <input\n            className=\"input\"\n            type=\"tel\"\n            value={this.state.number}\n            onChange={this.handeChange}\n            name=\"number\"\n            required\n          />\n        </label>\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactActions.addContact({ name, number })),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className=\"contact-list-item\">\n    <p className=\"name bold\">{name}</p>\n    <p>{number}</p>\n    <button className=\"button\" onClick={() => onDelete(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { connect } from 'react-redux';\nimport contactActions from '../../redux/contacts/contacts-actions';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul className=\"contact-list\">\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDelete={onDelete}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (allItems, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allItems.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({contacts: {items, filter}}) => ({\n contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: contactId => dispatch(contactActions.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactActions from '../../redux/contacts/contacts-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label\">\n    Find contacts by name\n    <input\n      className=\"input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","// Components\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n  return (\n    <div className=\"phonebook\">\n      <h1 className=\"phonebook_title\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"phonebook_title\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n// import types from './contacts-types';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions'\n\nconst initialItems = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\n//Without @reduxjs/toolkit\n\n// const items = (state = initialItems, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\nconst items = createReducer(initialItems, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","// import { combineReducers } from 'redux'; //createStore\nimport {\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n//Without @reduxjs/toolkit\n\n// const rootReducer = combineReducers({\n//   contacts: contactsReducer,\n// });\n\n// console.log(process.env.NODE_ENV);\n// console.log(getDefaultMiddleware());\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst rootReducer = combineReducers({\n  contacts: persistReducer(contactsPersistConfig, contactsReducer),\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import 'modern-normalize/modern-normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/style.scss';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}